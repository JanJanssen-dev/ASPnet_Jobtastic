@page
@model ASPnet_Jobtastic.Models.AdminPanelModel
@{
    ViewData["Title"] = "Admin-Panel";
    ViewData["ActivePage"] = "AdminPanel";
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i> @Html.Raw(@TempData["SuccessMessage"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i> @Html.Raw(TempData["ErrorMessage"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div id="adminContent" class="card shadow-sm mb-4">
    <div class="card-header bg-light">
        <h5 class="mb-0">Administratorfunktionen</h5>
    </div>
    <div class="card-body">
        <div class="text-center" id="loadingSpinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Wird geladen...</span>
            </div>
            <p class="mt-2">Administratorfunktionen werden geladen...</p>
        </div>
        <div id="adminPanelContent"></div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Laden des Admin-Panel-Inhalts via AJAX
            $.ajax({
                url: '/Admin/PanelContent',
                type: 'GET',
                success: function(data) {
                    $('#loadingSpinner').hide();
                    $('#adminPanelContent').html(data);

                    // DataTable initialisieren (nach dem Laden des Inhalts)
                    setTimeout(() => {
                        if ($('#usersTable').length) {
                            $('#usersTable').DataTable({
                                language: {
                                    url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/de-DE.json'
                                },
                                responsive: true,
                                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Alle"]],
                                order: [[0, 'asc']], // Nach E-Mail aufsteigend sortieren
                                columnDefs: [
                                    { targets: 0, orderable: true }, // E-Mail
                                    { targets: 1, orderable: false }, // Rollen
                                    { targets: 2, orderable: false, width: "150px" } // Aktionen-Spalte
                                ]
                            });
                        }
                    }, 100);
                },
                error: function() {
                    $('#loadingSpinner').hide();
                    $('#adminPanelContent').html('<div class="alert alert-danger">Fehler beim Laden der Administratorfunktionen.</div>');
                }
            });
        });

        // Bestätigen des Entfernens einer Rolle
        function confirmRemoveRole(userId, role, email) {
            Swal.fire({
                title: 'Rolle entfernen',
                html: `Möchten Sie wirklich die Rolle <strong>${role}</strong> vom Benutzer <strong>${email}</strong> entfernen?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Ja, entfernen',
                cancelButtonText: 'Abbrechen'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('removeUserId').value = userId;
                    document.getElementById('removeRole').value = role;
                    document.getElementById('removeRoleForm').submit();
                }
            });
        }

        // Zeigt den Rollen-Manager für einen Benutzer
        function showRoleManager(userId, email) {
            // Diese Funktion wird nach dem AJAX-Laden des Inhalts definiert
            // Die Werte für allRoles und model werden vom Server im HTML-Code geliefert
            var allRolesElement = document.getElementById('allRolesData');
            var modelElement = document.getElementById('modelData');

            if (!allRolesElement || !modelElement) {
                console.error("Rollen-Daten nicht gefunden");
                return;
            }

            const allRoles = JSON.parse(allRolesElement.textContent);
            const model = JSON.parse(modelElement.textContent);

            // Aktuelle Rollen des Benutzers ermitteln
            const userRoles = [];
            const user = model.find(u => u.userId === userId);

            if (user) {
                user.roles.forEach(role => userRoles.push(role));
            }

            // Optionen für das Dropdown-Menü erstellen
            const availableRoles = allRoles.filter(role => !userRoles.includes(role));
            let roleOptions = '';

            if (availableRoles.length > 0) {
                availableRoles.forEach(role => {
                    roleOptions += `<option value="${role}">${role}</option>`;
                });
            } else {
                roleOptions = '<option disabled>Keine weiteren Rollen verfügbar</option>';
            }

            // Aktuelle Rollen-Liste erstellen
            let currentRolesHtml = '';
            if (userRoles.length > 0) {
                currentRolesHtml = '<div class="mb-3"><h6>Aktuelle Rollen:</h6>';
                userRoles.forEach(role => {
                    currentRolesHtml += `
                        <div class="mb-2 d-flex justify-content-between align-items-center bg-light p-2 rounded">
                            <span>${role}</span>
                            <button type="button" class="btn btn-danger btn-sm"
                                    onclick="confirmRemoveRole('${userId}', '${role}', '${email}')">
                                <i class="fas fa-trash-alt"></i> Entfernen
                            </button>
                        </div>
                    `;
                });
                currentRolesHtml += '</div>';
            }

            Swal.fire({
                title: `Rollen für ${email}`,
                html: `
                    ${currentRolesHtml}
                    <form id="addRoleFormPopup" class="mt-3">
                        <h6>Neue Rolle hinzufügen:</h6>
                        <div class="input-group">
                            <select id="roleSelect" class="form-control">
                                ${roleOptions}
                            </select>
                            <button type="button" class="btn btn-success"
                                    onclick="addRole('${userId}')"
                                    ${availableRoles.length === 0 ? 'disabled' : ''}>
                                <i class="fas fa-plus"></i> Hinzufügen
                            </button>
                        </div>
                    </form>
                `,
                width: '500px',
                showCloseButton: true,
                showCancelButton: false,
                focusConfirm: false,
                confirmButtonText: 'Schließen'
            });
        }

        /**
         * Fügt eine Rolle zum Benutzer hinzu
         */
        function addRole(userId) {
            const roleSelect = document.getElementById('roleSelect');
            const selectedRole = roleSelect.value;

            if (selectedRole) {
                document.getElementById('addUserId').value = userId;
                document.getElementById('addRole').value = selectedRole;
                document.getElementById('addRoleForm').submit();
            }
        }
    </script>
}