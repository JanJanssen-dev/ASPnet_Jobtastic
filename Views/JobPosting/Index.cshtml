@model List<JobPostingModel>

@{
    ViewData["Title"] = "Deine Inserate";

    // Jobs in eigene, freigegebene und Admin-Jobs aufteilen
    var ownedJobs = Model.Where(j => j.IsOwner).ToList();
    var sharedJobs = Model.Where(j => !j.IsOwner && !j.IsAdminView).ToList();
    var adminJobs = Model.Where(j => j.IsAdminView).ToList();

    bool isAdmin = ViewBag.IsAdmin ?? false;
    bool showAllJobs = ViewBag.ShowAllJobs ?? false;
}

<!-- Hauptcontainer für die gesamte Seite -->
<section class="p-4 bg-light rounded shadow">
    <!-- Header-Bereich mit Logo und Titel -->
    <div class="p-4 mb-3 rounded-3 text-center shadow" style="background-color: #F2FDFF" role="banner" aria-label="Jobtastic Kopfbereich">
        <img src="~/images/JobtasticBannerNEW.png" alt="Jobtastic Logo" class="img-fluid" style="max-width: 100%; height: auto;">
        <h4 style="color: #0195ED">Jobpostings erstellen und die passenden Talente finden</h4>
    </div>

    <!-- Admin-Filter (nur für Administratoren anzeigen) -->
    @if (isAdmin)
    {
        <div class="mb-3 p-3 bg-light border rounded shadow" role="region" aria-label="Administrator-Optionen">
            <form asp-action="Index" method="get" class="d-flex flex-wrap align-items-center">
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="showAllJobs" name="showAllJobs" value="true" @(showAllJobs ? "checked" : "")
                           aria-labelledby="showAllJobsLabel">
                    <label class="form-check-label" for="showAllJobs" id="showAllJobsLabel">Alle Jobs im System anzeigen</label>
                </div>
                <div class="text-muted ms-md-3 mt-2 mt-md-0">
                    <i class="bi bi-info-circle" aria-hidden="true"></i>
                    <span>Als Administrator kannst du zwischen deinen eigenen Jobs und allen Jobs im System wechseln.</span>
                </div>
            </form>
        </div>
    }

    <!-- Button zum Erstellen eines neuen Jobs (oberer Button) -->
    <div class="text-end mb-3">
        <a class="btn btn-outline-primary shadow" asp-controller="JobPosting" asp-action="CreateJob">
            <i class="fas fa-plus-circle me-2" aria-hidden="true"></i>Neuen Job anlegen
        </a>
    </div>

    <!-- Tabs für verschiedene Job-Kategorien -->
    <ul class="nav nav-tabs" id="jobTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="owned-tab" data-bs-toggle="tab" data-bs-target="#owned" type="button" role="tab" aria-controls="owned" aria-selected="true">
                Eigene Jobs <span class="badge bg-primary">@ownedJobs.Count</span>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="shared-tab" data-bs-toggle="tab" data-bs-target="#shared" type="button" role="tab" aria-controls="shared" aria-selected="false">
                Freigegebene Jobs <span class="badge bg-info">@sharedJobs.Count</span>
            </button>
        </li>
        @if (isAdmin && showAllJobs)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="admin-tab" data-bs-toggle="tab" data-bs-target="#admin" type="button" role="tab" aria-controls="admin" aria-selected="false">
                    Admin-Ansicht <span class="badge bg-warning text-dark">@adminJobs.Count</span>
                </button>
            </li>
        }
    </ul>

    <!-- Tab-Inhalte für verschiedene Job-Kategorien -->
    <div class="tab-content p-3 bg-white border border-top-0 rounded-bottom shadow-sm mb-4" id="jobTabsContent">
        <!-- Tab: Eigene Jobs -->
        <div class="tab-pane fade show active" id="owned" role="tabpanel" aria-labelledby="owned-tab">
            @await Html.PartialAsync("_JobTable", new JobTableViewModel
       {
           Jobs = ownedJobs,
           TableId = "ownedJobsTable",
           EmptyMessage = "Du hast noch keine eigenen Jobangebote erstellt.",
           ShowCreateButton = true
       })
        </div>

        <!-- Tab: Freigegebene Jobs -->
        <div class="tab-pane fade" id="shared" role="tabpanel" aria-labelledby="shared-tab">
            @await Html.PartialAsync("_JobTable", new JobTableViewModel
       {
           Jobs = sharedJobs,
           TableId = "sharedJobsTable",
           EmptyMessage = "Es wurden keine Jobs für dich freigegeben."
       })
        </div>

        <!-- Tab: Admin-Jobs (nur wenn Admin und showAllJobs) -->
        @if (isAdmin && showAllJobs)
        {
            <div class="tab-pane fade" id="admin" role="tabpanel" aria-labelledby="admin-tab">
                <!-- Warnung für Admin-Bereich -->
                <div class="alert alert-warning" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Du siehst diese Jobs als Administrator. Bearbeite sie mit Vorsicht!
                </div>

                @await Html.PartialAsync("_JobTable", new JobTableViewModel
       {
           Jobs = adminJobs,
           TableId = "adminJobsTable",
           EmptyMessage = "Es gibt keine weiteren Jobs im System."
       })
            </div>
        }
    </div>

    <!-- Versteckte Formulare für das Löschen von Jobs -->
    @foreach (var job in Model)
    {
        <form asp-action="DeleteJob" asp-route-id="@job.Id" method="post" id="deleteForm-@job.Id" style="display: none;">
            @Html.AntiForgeryToken()
        </form>
    }

    <!-- Button zum Erstellen eines neuen Jobs (unterer Button) -->
    <div class="text-end mt-3">
        <a class="btn btn-outline-primary" asp-controller="JobPosting" asp-action="CreateJob">
            <i class="fas fa-plus-circle me-2"></i>Neuen Job anlegen
        </a>
    </div>
</section>

@section Scripts {
    <script>
        // Cache für Jobdetails
        const jobDetailsCache = {};

        // DataTables initialisieren, sobald DOM bereit ist
        $(document).ready(function() {
            // Gemeinsame Konfiguration für alle Tabellen
            const commonConfig = {
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/de-DE.json'
                },
                responsive: true,
                pageLength: 10,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Alle"]],
                autoWidth: false,
                deferRender: true,
                processing: true
            };

            // Tabellen initialisieren, falls vorhanden
            initializeTable("ownedJobsTable", { ...commonConfig, order: [[5, 'desc']] });
            initializeTable("sharedJobsTable", { ...commonConfig, order: [[4, 'asc']] });
            initializeTable("adminJobsTable", { ...commonConfig, order: [[5, 'desc']] });

            // Event-Handler für Admin-Ansicht Checkbox
            const showAllJobsCheckbox = document.getElementById('showAllJobs');
            if (showAllJobsCheckbox) {
                showAllJobsCheckbox.onchange = function(e) {
                    e.preventDefault();
                    const form = this.form;

                    Swal.fire({
                        position: "top-end",
                        icon: "success",
                        title: this.checked ? "Admin-Ansicht aktiviert" : "Admin-Ansicht deaktiviert",
                        showConfirmButton: false,
                        timer: 2000,
                        allowOutsideClick: false,
                        willClose: () => {
                            form.submit();
                        }
                    });
                };
            }
        });

        /**
         * Initialisiert eine DataTable, wenn sie existiert und Daten enthält
         * param {string} tableId - ID der Tabelle
         * param {object} config - DataTable-Konfiguration
         */
        function initializeTable(tableId, config) {
            const $table = $(`#${tableId}`);
            if ($table.length && $table.find('tbody tr').length > 0) {
                $table.DataTable(config);
            }
        }

        /**
         * Holt Jobdetails vom Server
         * param {number} jobId - ID des Jobs
         * returns {Promise<Object>} Job-Detailinformationen
         */
        async function fetchJobDetails(jobId) {
            // Wenn Details im Cache, direkt zurückgeben
            if (jobDetailsCache[jobId]) {
                return jobDetailsCache[jobId];
            }

            try {
                Swal.fire({
                    title: 'Laden...',
                    text: 'Jobdetails werden geladen',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/Home/GetJobDetails/${jobId}`);
                if (!response.ok) {
                    throw new Error('Jobdetails konnten nicht geladen werden');
                }

                const jobDetails = await response.json();

                // Im Cache speichern
                jobDetailsCache[jobId] = jobDetails;

                return jobDetails;
            } catch (error) {
                console.error('Fehler beim Laden der Jobdetails:', error);
                return {
                    jobTitle: 'Fehler',
                    jobDescription: 'Keine Details verfügbar',
                    companyName: 'Unbekannt'
                };
            }
        }

        /**
         * Generiert HTML für Jobdetail-Modal
         * param {Object} job - Jobobjekt
         * returns {string} Generiertes HTML
         */
        function generateJobDetailHTML(job) {
            // Logo generieren
            const logoHtml = job.companyImageBase64
                ? `<img src="data:image/png;base64,${job.companyImageBase64}" alt="${job.companyName} Logo" class="img-fluid mb-3" style="max-height: 100px; max-width: 200px; object-fit: contain;">`
                : '';

            // Gehalt formatieren
            const salary = job.salary > 0
                ? new Intl.NumberFormat('de-DE', {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(job.salary)
                : 'Nach Vereinbarung';

            // Kontaktinformationen generieren
            const contactHtml = `
                <h5 class="mt-3">Kontakt</h5>
                ${job.contactName ? `<p><strong>Ansprechpartner:</strong> ${job.contactName}</p>` : ''}
                ${job.contactEmail ? `<p><strong>E-Mail:</strong> <a href="mailto:${job.contactEmail}">${job.contactEmail}</a></p>` : ''}
            `;

            // Website generieren
            const websiteHtml = job.companyWebsite
                ? `<p><strong>Website:</strong> <a href="${job.companyWebsite}" target="_blank" rel="noopener noreferrer">${job.companyWebsite}</a></p>`
                : '';

            // Metadaten
            const metadataHtml = job.creationDate ? `
                <hr>
                <div class="small text-muted">
                    <p><strong>Erstellt am:</strong> ${new Date(job.creationDate).toLocaleDateString('de-DE')}</p>
                    ${job.changeDate ? `<p><strong>Geändert am:</strong> ${new Date(job.changeDate).toLocaleDateString('de-DE')} von ${job.changeUserName || 'unbekannt'}</p>` : ''}
                </div>
            ` : '';

            return `
                <div class="text-center">
                    ${logoHtml}
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Standort:</strong> ${job.jobLocation}</p>
                        <p><strong>Startdatum:</strong> ${new Date(job.startDate).toLocaleDateString('de-DE')}</p>
                        <p><strong>Gehalt:</strong> ${salary}</p>
                        ${websiteHtml}
                    </div>
                    <div class="col-md-6">
                        ${contactHtml}
                    </div>
                </div>
                <hr>
                <div>
                    <h5>Beschreibung</h5>
                    <div class="job-description">${job.jobDescription || 'Keine Beschreibung verfügbar'}</div>
                </div>
                ${metadataHtml}
            `;
        }

        /**
         * Zeigt Jobdetails im Modal an
         * param {number} id - Job-ID
         * param {string} title - Jobtitel für die Anzeige im Modal
         */
        async function showJobDetails(id, title) {
            try {
                // Job-Details laden
                const job = await fetchJobDetails(id);

                // Modal mit Details anzeigen
                Swal.fire({
                    title: `${title} bei ${job.companyName}`,
                    html: generateJobDetailHTML(job),
                    width: '80%',
                    showCloseButton: true,
                    showCancelButton: false,
                    confirmButtonText: 'Schließen',
                    customClass: {
                        container: 'swal-job-details-container',
                        popup: 'swal-job-details-popup',
                        content: 'swal-job-details-content'
                    }
                });
            } catch (error) {
                console.error('Fehler beim Anzeigen der Jobdetails:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Fehler',
                    text: 'Die Jobdetails konnten nicht geladen werden.'
                });
            }
        }

        /**
         * Zeigt einen verbesserten Bestätigungsdialog vor dem Löschen eines Jobs
         * param {number} id - Job-ID
         * param {string} jobTitle - Jobtitel für die Anzeige im Dialog
         */
        function confirmDelete(id, jobTitle) {
            Swal.fire({
                title: "Job löschen?",
                text: `Möchtest du den Job "${jobTitle}" wirklich löschen?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#dc3545",
                cancelButtonColor: "#6c757d",
                confirmButtonText: '<i class="fas fa-trash me-1"></i> Löschen',
                cancelButtonText: '<i class="fas fa-times me-1"></i> Abbrechen',
                customClass: {
                    confirmButton: 'btn btn-danger',
                    cancelButton: 'btn btn-secondary'
                },
                buttonsStyling: false
            }).then((result) => {
                if (result.isConfirmed) {
                    // Formular absenden, wenn bestätigt
                    document.getElementById(`deleteForm-${id}`).submit();

                    Swal.fire({
                        icon: 'success',
                        title: 'Gelöscht!',
                        text: 'Der Job wurde erfolgreich gelöscht.',
                        timer: 2000,
                        showConfirmButton: false
                    });
                }
            });
        }
    </script>
}

<style>
    /* ===== Allgemeine Styles ===== */
    html {
        scrollbar-gutter: stable; /* Reserviert Platz für Scrollbar zur Vermeidung von Layout-Sprüngen */
    }

    /* Verbesserte Kartenansicht */
    .card, .shadow {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
    }

    /* Verbesserte Hover-Effekte für Tabellenzeilen */
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.075);
        cursor: pointer;
    }

    /* Bessere Größenanpassung für Firmenlogos */
    .img-fluid {
        transition: transform 0.2s;
    }

        .img-fluid:hover {
            transform: scale(1.1);
        }

    /* Verbesserte TabPane-Darstellung */
    .tab-pane {
        padding: 1rem;
    }

    /* SweetAlert2 Anpassungen für Jobdetails */
    .swal-job-details-popup {
        font-size: 0.9rem;
    }

    .swal-job-details-content .job-description {
        max-height: 300px;
        overflow-y: auto;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
        margin-top: 10px;
    }

    /* ===== Aktions-Buttons Styling ===== */

    /* Icon-Button-Styling */
    .action-btn {
        width: 38px;
        height: 38px;
        padding: 0;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        margin: 0 2px;
        transition: all 0.2s ease;
        border: none;
    }

        .action-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .action-btn:active {
            transform: scale(0.95);
        }

        .action-btn i {
            font-size: 1rem;
        }

    /* Spezifische Button-Farben */
    .btn-view {
        background-color: #f8f9fa;
        color: #0d6efd;
        border: 1px solid #dee2e6;
    }

        .btn-view:hover {
            background-color: #e2e6ea;
        }

    .btn-edit {
        background-color: #28a745;
        color: white;
    }

    .btn-share {
        background-color: #17a2b8;
        color: white;
    }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

    /* Container für die Action-Buttons */
    .action-buttons {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: nowrap;
    }

    /* Tooltip-Styling */
    .action-tooltip {
        position: relative;
    }

        .action-tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0,0,0,0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            white-space: nowrap;
            z-index: 100;
            margin-bottom: 5px;
        }

    /* Responsive Anpassungen für mobile Geräte */
    @@ media (max-width: 768px) {
        .action-buttons

    {
        justify-content: space-around;
    }

    .action-btn {
        width: 32px;
        height: 32px;
    }

        .action-btn i {
            font-size: 0.875rem;
        }

    }
</style>
