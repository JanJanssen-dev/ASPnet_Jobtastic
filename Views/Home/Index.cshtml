@model List<ASPnet_Jobtastic.Models.JobPostingModel>

@{
    ViewData["Title"] = "Home Page";
}

<div class="p-4 rounded-3 text-center" style="background-color: #F2FDFF">
    <img src="~/images/JobtasticBannerNEW.png" alt="Jobtastic" class="img-fluid" style="max-width: 100%; height: auto;">
    <h4 style="color: #0195ED">Finde deinen Traumjob oder die perfekten Kandidaten für dein Unternehmen</h4>
</div>

@* Jobinserate-Bereich für öffentliche Anzeige *@
<section class="mt-4 p-3 bg-light rounded-3 shadow-sm">
    <h2 class="mb-4 text-center">Aktuelle Jobangebote</h2>

    @if (Model != null && Model.Any())
    {
        @* Jobinserate-Tabelle mit DataTables *@
        <div class="table-responsive">
            <table id="jobsTable" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Unternehmen</th>
                        <th>Jobtitel</th>
                        <th>Standort</th>
                        <th>Gehalt</th>
                        <th>Start</th>
                        <th>Erstellt am</th>
                        <th>Aktionen</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var job in Model)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    @if (job.CompanyImage != null && job.CompanyImage.Length > 0)
                                    {
                                        var base64 = Convert.ToBase64String(job.CompanyImage);
                                        <img src="data:image/png;base64,@base64" alt="@job.CompanyName Logo" class="me-2" style="max-width: 40px; max-height: 30px;">
                                    }
                                    @job.CompanyName
                                </div>
                            </td>
                            <td>@job.JobTitle</td>
                            <td>@job.JobLocation</td>
                            <td data-order="@job.Salary">
                                @if (job.Salary > 0)
                                {
                                    @(job.Salary.ToString("N0") + " €")
                                }
                                else
                                {
                                    <span>Nach Vereinbarung</span>
                                }
                            </td>
                            <td data-order="@job.StartDate.ToString("yyyy-MM-dd")">@job.StartDate.ToShortDateString()</td>
                            <td data-order="@(job.CreationDate?.ToString("yyyy-MM-dd") ?? "")">
                                @if (job.CreationDate.HasValue)
                                {
                                    @job.CreationDate.Value.ToShortDateString()
                                }
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary btn-sm"
                                        onclick="showJobDetails('@job.Id', '@job.JobTitle.Replace("'", "\\'")','@job.CompanyName.Replace("'", "\\'")','@job.JobLocation.Replace("'", "\\'")','@job.StartDate.ToShortDateString()')">
                                    Details
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <p>Zurzeit sind keine Jobangebote verfügbar.</p>
        </div>
    }
</section>

@* Versteckte Divs für die Jobbeschreibungen *@
@foreach (var job in Model)
{
    <div id="jobDescription-@job.Id" style="display: none;">
        @Html.Raw(job.JobDescription.Replace("\n", "<br>"))
    </div>
}

@section Scripts {
    @* DataTables CSS und JS einbinden *@
    
    <script>
        $(document).ready(function() {
            // DataTable initialisieren
            $('#jobsTable').DataTable({
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/de-DE.json'
                },
                responsive: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Alle"]],
                order: [[5, 'desc']], // Nach Erstellungsdatum absteigend sortieren
                columnDefs: [
                    { targets: 0, orderable: true }, // Unternehmen
                    { targets: 6, orderable: false } // Aktionen-Spalte
                ]
            });
        });

        /**
         * Zeigt Jobdetails mit SweetAlert2 an
         */
        function showJobDetails(id, title, company, location, startDate) {
            // Jobbeschreibung holen
            const jobDescription = document.getElementById('jobDescription-' + id).innerHTML;

            // Lade Jobdaten aus dem Modell
            const job = @Html.Raw(Json.Serialize(Model))
                .find(j => j.id === parseInt(id));

            // Logo HTML
            let logoHtml = '';
            if (job.companyImage) {
                const base64 = btoa(String.fromCharCode.apply(null, new Uint8Array(job.companyImage)));
                logoHtml = `<img src="data:image/png;base64,${base64}" alt="${company} Logo"
                           class="img-fluid mb-3" style="max-height: 100px;"><br>`;
            }

            // Kontaktinfo
            let contactHtml = '<h5 class="mt-3">Kontakt</h5>';
            if (job.contactName) {
                contactHtml += `<p><strong>Ansprechpartner:</strong> ${job.contactName}</p>`;
            }
            if (job.contactEmail) {
                contactHtml += `<p><strong>E-Mail:</strong> ${job.contactEmail}</p>`;
            }

            // Website
            let websiteHtml = '';
            if (job.companyWebsite) {
                websiteHtml = `<p><strong>Website:</strong> <a href="${job.companyWebsite}" target="_blank">${job.companyWebsite}</a></p>`;
            }

            // Gehalt formatieren
            let salary = 'Nach Vereinbarung';
            if (job.salary > 0) {
                salary = new Intl.NumberFormat('de-DE').format(job.salary) + ' €';
            }

            Swal.fire({
                title: `${title} bei ${company}`,
                html: `
                    <div class="text-center">
                        ${logoHtml}
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Standort:</strong> ${location}</p>
                            <p><strong>Startdatum:</strong> ${startDate}</p>
                            <p><strong>Gehalt:</strong> ${salary}</p>
                            ${websiteHtml}
                        </div>
                        <div class="col-md-6">
                            ${contactHtml}
                        </div>
                    </div>
                    <hr>
                    <div class="text-left">
                        <h5>Beschreibung</h5>
                        <div id="description-container-${id}"></div>
                    </div>
                `,
                width: '80%',
                showCloseButton: true,
                showCancelButton: true,
                focusConfirm: false,
                confirmButtonText: 'Jetzt bewerben!',
                cancelButtonText: 'Schließen',
                didOpen: () => {
                    document.getElementById(`description-container-${id}`).innerHTML = jobDescription;
                }
            }).then((result) => {
                if (result.isConfirmed && job.contactEmail) {
                    window.location.href = `mailto:${job.contactEmail}?subject=Bewerbung für ${title}`;
                }
            });
        }
    </script>
}