@model List<ASPnet_Jobtastic.Models.JobPostingModel>

@{
    ViewData["Title"] = "Home Page";
}

@* Hauptcontainer für die gesamte Seite *@
<section class="p-4 bg-light rounded shadow-sm">
    @* Header-Bereich mit Titel *@
    <div class="p-4 mb-3 rounded-3 text-center shadow" style="background-color: #F2FDFF">
        <img src="~/images/JobtasticBannerNEW.png" alt="Jobtastic" class="img-fluid" style="max-width: 100%; height: auto;">
        <h4 style="color: #0195ED">Finde deinen Traumjob oder die perfekten Kandidaten für dein Unternehmen</h4>
    </div>

    <section class="mt-4 p-4 bg-light rounded shadow">
        <h2 class="mb-4 text-center">Aktuelle Jobangebote</h2>

        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table id="jobsTable" class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Unternehmen</th>
                            <th>Jobtitel</th>
                            <th>Standort</th>
                            <th>Gehalt</th>
                            <th>Start</th>
                            <th>Erstellt am</th>
                            <th>Aktionen</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (job.CompanyImage != null && job.CompanyImage.Length > 0)
                                        {
                                            var base64 = Convert.ToBase64String(job.CompanyImage);
                                            <img src="data:image/png;base64,@base64" alt="@job.CompanyName Logo" class="me-2" style="max-width: 40px; max-height: 30px;">
                                        }
                                        @job.CompanyName
                                    </div>
                                </td>
                                <td>@job.JobTitle</td>
                                <td>@job.JobLocation</td>
                                <td data-order="@job.Salary">
                                    @if (job.Salary > 0)
                                    {
                                        @(job.Salary.ToString("N0") + " €")
                                    }
                                    else
                                    {
                                        <span>Nach Vereinbarung</span>
                                    }
                                </td>
                                <td data-order="@job.StartDate.ToString("yyyy-MM-dd")">@job.StartDate.ToShortDateString()</td>
                                <td data-order="@(job.CreationDate?.ToString("yyyy-MM-dd") ?? "")">
                                    @if (job.CreationDate.HasValue)
                                    {
                                        @job.CreationDate.Value.ToShortDateString()
                                    }
                                </td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm"
                                            onclick="showJobDetails(@job.Id, '@job.JobTitle.Replace("'", "\\'")','@job.CompanyName.Replace("'", "\\'")')">
                                        Details
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info text-center">
                <p>Zurzeit sind keine Jobangebote verfügbar.</p>
            </div>
        }
    </section>
</section>
@section Scripts {
    <script>
        // Limitiere die Größe des Caches auf 50 Einträge
        const MAX_CACHE_SIZE = 50;

        // Caching-Mechanismus für Jobdetails mit Größenbeschränkung
        const jobDetailsCache = {
            _cache: {},
            get(jobId) {
                return this._cache[jobId];
            },
            set(jobId, details) {
                // Wenn Cache-Limit erreicht, älteste Einträge entfernen
                if (Object.keys(this._cache).length >= MAX_CACHE_SIZE) {
                    const oldestKey = Object.keys(this._cache)[0];
                    delete this._cache[oldestKey];
                }
                this._cache[jobId] = details;
            }
        };

        /**
         * Holt Jobdetails mit verbesserter Caching-Strategie
         * @@param {number} jobId - ID des Jobs
         * @@returns {Promise<Object>} Job-Detailinformationen
         */
        async function fetchJobDetails(jobId) {
            // Wenn Details bereits im Cache, direkt zurückgeben
            const cachedDetails = jobDetailsCache.get(jobId);
            if (cachedDetails) {
                return cachedDetails;
            }

            try {
                const response = await fetch(`/Home/GetJobDetails/${jobId}`);
                if (!response.ok) {
                    throw new Error('Jobdetails konnten nicht geladen werden');
                }
                const jobDetails = await response.json();

                // Im Cache speichern mit Größenbeschränkung
                jobDetailsCache.set(jobId, jobDetails);

                return jobDetails;
            } catch (error) {
                console.error('Fehler beim Laden der Jobdetails:', error);
                return {
                    jobTitle: 'Fehler',
                    jobDescription: 'Keine Details verfügbar',
                    companyName: 'Unbekannt'
                };
            }
        }

        /**
         * Generiert HTML für Jobdetail-Modal
         * @@param {Object} job - Jobobjekt
         * @@returns {string} Generiertes HTML
         */
        function generateJobDetailHTML(job) {
            // Logo generieren mit Fallback für Base64-Konvertierung
            const logoHtml = job.companyImage && job.companyImage.length > 0
                ? `<img src="data:image/png;base64,${btoa(String.fromCharCode.apply(null, new Uint8Array(job.companyImage)))}"
                    alt="${job.companyName} Logo"
                    class="img-fluid mb-3"
                    style="max-height: 100px; max-width: 200px; object-fit: contain;">`
                : '';

            // Gehalt formatieren
            const salary = job.salary > 0
                ? new Intl.NumberFormat('de-DE', {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(job.salary)
                : 'Nach Vereinbarung';

            // Kontaktinformationen generieren
            const contactHtml = `
                <h5 class="mt-3">Kontakt</h5>
                ${job.contactName ? `<p><strong>Ansprechpartner:</strong> ${job.contactName}</p>` : ''}
                ${job.contactEmail ? `<p><strong>E-Mail:</strong> <a href="mailto:${job.contactEmail}">${job.contactEmail}</a></p>` : ''}
            `;

            // Website generieren
            const websiteHtml = job.companyWebsite
                ? `<p><strong>Website:</strong> <a href="${job.companyWebsite}" target="_blank" rel="noopener noreferrer">${job.companyWebsite}</a></p>`
                : '';

            return `
                <div class="text-center">
                    ${logoHtml}
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Standort:</strong> ${job.jobLocation}</p>
                        <p><strong>Startdatum:</strong> ${new Date(job.startDate).toLocaleDateString('de-DE')}</p>
                        <p><strong>Gehalt:</strong> ${salary}</p>
                        ${websiteHtml}
                    </div>
                    <div class="col-md-6">
                        ${contactHtml}
                    </div>
                </div>
                <hr>
                <div class="text-left">
                    <h5>Beschreibung</h5>
                    <div class="job-description">${job.jobDescription || 'Keine Beschreibung verfügbar'}</div>
                </div>
            `;
        }

        /**
         * Zeigt Jobdetails mit völlig überarbeiteter Modal-Logik
         * param {number} id - Job-ID
         * param {string} title - Jobtitel
         * param {string} company - Unternehmensname
         */
        async function showJobDetails(id, title, company) {
            try {
                // Loading-Dialog mit komplett separater Instanz
                const loadingAlert = Swal.fire({
                    title: 'Laden...',
                    text: 'Jobdetails werden geladen',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Job-Details laden
                const job = await fetchJobDetails(id);

                // Loading-Dialog schließen - wichtig!
                loadingAlert.close();

                // Hauptdialog
                Swal.fire({
                    title: `${title} bei ${company}`,
                    html: generateJobDetailHTML(job),
                    width: '80%',
                    showCloseButton: true,
                    showCancelButton: true,
                    cancelButtonText: 'Schließen',
                    confirmButtonText: 'Jetzt bewerben!',

                    preConfirm: () => {
                        if (!job.contactEmail) {
                            Swal.showValidationMessage('Keine Kontaktinformationen verfügbar');
                            return false;
                        }
                        return true;
                    }
                }).then((result) => {

                    if (result.isConfirmed && job.contactEmail) {
                        // E-Mail-Aktion erst ausführen, nachdem Modal vollständig geschlossen wurde
                        const mailtoLink = `mailto:${job.contactEmail}?subject=${encodeURIComponent(`Bewerbung für ${title}`)}&body=${encodeURIComponent(`Sehr geehrte Damen und Herren,\n\nIch interessiere mich für die ausgeschriebene Stelle "${title}".\n\nMit freundlichen Grüßen,\n`)}`;

                        window.open(mailtoLink, '_blank');
                    }
                });

            } catch (error) {
                console.error('Fehler bei Jobdetails:', error);
                // Stelle sicher, dass alle vorherigen Alerts geschlossen sind
                Swal.close();

                // Zeige Fehlermeldung in separatem Alert
                setTimeout(() => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Fehler',
                        text: 'Die Jobdetails konnten nicht geladen werden.'
                    });
                }, 100);
            }
        }
         

        

        // DataTable initialisieren mit erweiterten Performanz-Optimierungen
        $(document).ready(function() {
            // Performance-Optimierung: DataTable nur initialisieren, wenn Daten vorhanden
            const $jobsTable = $('#jobsTable');
            if ($jobsTable.length && $jobsTable.find('tbody tr').length > 0) {
                $jobsTable.DataTable({
                    language: {
                        url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/de-DE.json'
                    },
                    responsive: true,
                    pageLength: 10,  // Standardmäßig 10 Einträge pro Seite
                    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Alle"]],
                    order: [[5, 'desc']], // Nach Erstellungsdatum absteigend sortieren
                    columnDefs: [
                        { targets: 0, orderable: true },   // Unternehmen
                        { targets: 6, orderable: false }   // Aktionen-Spalte
                    ],
                    // Erweiterte Performanz-Optimierungen
                    deferRender: true,    // Verzögertes Rendering
                    scrollX: false,       // Vertikales Scrollen deaktivieren
                    autoWidth: false,     // Automatische Spaltenbreite deaktivieren
                    processing: true,     // Ladeindikator anzeigen
                    serverSide: false,    // Clientseitige Verarbeitung

                    // Zusätzliche Performanz-Optimierungen
                    paging: true,         // Seitenumbruch aktivieren
                    pageResize: false,    // Größenänderung deaktivieren
                    search: {
                        smart: true,      // Intelligente Suche aktivieren
                        caseInsensitive: true // Groß-/Kleinschreibung ignorieren
                    }
                });
            }
        });
    </script>
}